# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Jia Dan Duan
Student ID: 604022222
Email: danielduan88@yahoo.com

# Partner 2 (if you're working in a team)
Name: Kenneth Shi
Student ID: 304063313
Email: kenshi@ucla.edu

# Design Lab: Encrypting communication

We decided to do a simple encryption for communicating with the tracker as well as other peers.
We made a rotate64 function to obfuscate and scramble the bits that are going through the pipeline.
In order for this to be effective, both the tracker and all the peers its supposed to connect to should
have this rotate64 enabled. Since decryption and encryption is the same, rot64 can be applied before sending
and after receiving.

We tried to coordinate RSA private keys and using AES but we quickly found out that the required libraries
are very difficult to use and learn. It is also possible to hard code a key and use a stronger
algorithm but we feel like this basic encoding/decoding demonstrates a working security model.

Encrypting communications sent between peers forbids others from snooping in on file transfers. Encrypting
tracker communcation makes it harder to figure out what file transfers are happening and what files peers are
advertising and requesting.

Changes are in the writescan.c file.
